Index: GoGreen/settings.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"\nDjango settings for GoGreen project.\n\nGenerated by 'django-admin startproject' using Django 4.1.dev20211025081002.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/dev/topics/settings/\n\nFor the full list of settings and their values, see\nhttps://docs.djangoproject.com/en/dev/ref/settings/\n\"\"\"\nimport os\nfrom pathlib import Path\n\n\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/dev/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-h*24dkcj3#k!xzn&guhkl_ao-t&w(08)83cgc6dk^m$ari+8@#'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'CarList.apps.CarlistConfig',\n    'crispy_forms',\n    'overview.apps.OverviewConfig',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'GoGreen.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'GoGreen.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/dev/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': 'gogreen',\n        'USER': 'gogreen',\n        'PASSWORD': 'LokaHaust2021',\n        'HOST': 'localhost',\n        'PORT':'5432'\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/dev/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/dev/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'GMT'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/dev/howto/static-files/\n\nSTATIC_URL = 'static/'\n\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, \"static\")\n]\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/dev/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n\nLOGIN_REDIRECT_URL = '/'\nLOGOUT_REDIRECT_URL = 'front_page/login'
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/GoGreen/settings.py b/GoGreen/settings.py
--- a/GoGreen/settings.py	(revision 282c4524388d5e7fd518b0a465db5c8828af134f)
+++ b/GoGreen/settings.py	(date 1638371040266)
@@ -81,9 +81,9 @@
 DATABASES = {
     'default': {
         'ENGINE': 'django.db.backends.postgresql',
-        'NAME': 'gogreen',
-        'USER': 'gogreen',
-        'PASSWORD': 'LokaHaust2021',
+        'NAME': 'gogreen1',
+        'USER': 'jonevertpalsson',
+        'PASSWORD': 'jonevert',
         'HOST': 'localhost',
         'PORT':'5432'
     }
Index: CarList/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.shortcuts import get_object_or_404, render\nfrom django.http import HttpResponse\nfrom django.contrib.auth.decorators import login_required\nfrom .models import instances\n\n@login_required\ndef index(request):\n    return render(request, 'CarList/index.html')\n\n@login_required\ndef most_instances(request, plate_nr = instances.objects.order_by(\"-id\")[0]):\n\n    Instances = instances.objects.all()\n    \n    if (type(plate_nr) == str):\n        flag = 0\n        # Plate was not defaulted\n        for plate in Instances.iterator():\n            if plate.plate_nr == plate_nr:\n                plate_nr = plate\n                flag = 1\n        #if plate was not found then we return the most recent plate\n        if (flag != 1):\n            plate_nr = instances.objects.order_by(\"-id\")[0]\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/CarList/views.py b/CarList/views.py
--- a/CarList/views.py	(revision 282c4524388d5e7fd518b0a465db5c8828af134f)
+++ b/CarList/views.py	(date 1638370714954)
@@ -8,10 +8,9 @@
     return render(request, 'CarList/index.html')
 
 @login_required
-def most_instances(request, plate_nr = instances.objects.order_by("-id")[0]):
-
+def most_instances(request, plate_nr=instances.objects.order_by("-id")[0]):
     Instances = instances.objects.all()
-    
+
     if (type(plate_nr) == str):
         flag = 0
         # Plate was not defaulted
@@ -19,8 +18,13 @@
             if plate.plate_nr == plate_nr:
                 plate_nr = plate
                 flag = 1
-        #if plate was not found then we return the most recent plate
+        # if plate was not found then we return the most recent plate
         if (flag != 1):
             plate_nr = instances.objects.order_by("-id")[0]
 
+    return render(request, 'CarList/index.html', {
+        'Instances': Instances,
+        'Plate': plate_nr,
+    })
+
 
